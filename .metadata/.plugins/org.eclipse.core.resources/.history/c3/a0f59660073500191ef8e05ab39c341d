package credito.curso.spring.configuracion;

import java.util.Properties;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate4.LocalSessionFactoryBean;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import credito.curso.spring.aspectos.AspectoHibernate;

@Configuration
@ComponentScan(value={"credito.curso.spring","credito.curso.spring.services","credito.curso.spring.daos","credito.curso.spring.aspectos"})
@EnableAspectJAutoProxy
@EnableWebMvc
public class AppConfig {



	@Bean
	public InternalResourceViewResolver getInternalResourceViewResolver()
	{
		InternalResourceViewResolver resolver= new InternalResourceViewResolver();
		resolver.setPrefix("/WEB-INF/views/");
		resolver.setSuffix(".jsp");

		return resolver;
	}

	@Bean
	public DriverManagerDataSource getDriverManagerDataSource()
	{
		DriverManagerDataSource dataSource=  new DriverManagerDataSource();
		dataSource.setUrl("jdbc:mysql://192.168.102.229:3306/empresa");
		dataSource.setUsername("curso");
		dataSource.setPassword("cursocurso");
		dataSource.setDriverClassName("com.mysql.jdbc.Driver");
		return dataSource;
	}


	@Bean
	public LocalSessionFactoryBean getLocalSessionFactoryBean()
	{
		LocalSessionFactoryBean bean= new LocalSessionFactoryBean();
		bean.setDataSource(getDriverManagerDataSource());
		bean.setPackagesToScan("credito.curso.spring.datos");


		Properties prop= new Properties();
		prop.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
		prop.setProperty("hibernate.show_sql", "true");
		prop.setProperty("hibernate.format_sql", "true");

		bean.setHibernateProperties(prop);
		return bean;

	}
	@Bean
	public HibernateTransactionManager getHibernateTransactionManager()
	{
		HibernateTransactionManager hibernateTransactionManager= new HibernateTransactionManager();
		hibernateTransactionManager.setSessionFactory(getLocalSessionFactoryBean().getObject());
		return hibernateTransactionManager;

	}

	@Bean
	public OpenSessionInViewInterceptor getOpenSessionInViewInterceptor()
	{
		OpenSessionInViewInterceptor openSessionInViewInterceptor= new OpenSessionInViewInterceptor();
		openSessionInViewInterceptor.setSessionFactory(getLocalSessionFactoryBean().getObject());
		return openSessionInViewInterceptor;
	}


}






